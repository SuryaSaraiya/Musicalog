2020-12-16 12:54:49.743 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 12:57:42.453 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:00:07.709 +00:00 [Error] Errored while getting list of albums "A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified)"
System.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SQL Network Interfaces, error: 26 - Error Locating Server/Instance Specified)
   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, DbConnectionPool pool, String accessToken, Boolean applyTransientFaultHandling, SqlAuthenticationProviderManager sqlAuthProviderManager)
   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   at System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   at System.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   at System.Data.SqlClient.SqlConnection.TryOpenInner(TaskCompletionSource`1 retry)
   at System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry)
   at System.Data.SqlClient.SqlConnection.Open()
   at System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.<Open>b__36(DbConnection t, DbConnectionInterceptionContext c)
   at System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext](TTarget target, Action`2 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   at System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(DbConnection connection, DbInterceptionContext interceptionContext)
   at System.Data.Entity.SqlServer.SqlProviderServices.<>c__DisplayClass33.<UsingConnection>b__32()
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   at System.Data.Entity.SqlServer.SqlProviderServices.UsingConnection(DbConnection sqlConnection, Action`1 act)
   at System.Data.Entity.SqlServer.SqlProviderServices.UsingMasterConnection(DbConnection sqlConnection, Action`1 act)
   at System.Data.Entity.SqlServer.SqlProviderServices.CreateDatabaseFromScript(Nullable`1 commandTimeout, DbConnection sqlConnection, String createDatabaseScript)
   at System.Data.Entity.SqlServer.SqlProviderServices.DbCreateDatabase(DbConnection connection, Nullable`1 commandTimeout, StoreItemCollection storeItemCollection)
   at System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(DbConnection connection, Nullable`1 commandTimeout, StoreItemCollection storeItemCollection)
   at System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase()
   at System.Data.Entity.Migrations.Utilities.DatabaseCreator.Create(DbConnection connection)
   at System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   at System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   at System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   at System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   at System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   at System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(TContext context)
   at System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   at System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   at System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   at System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   at System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   at System.Data.Entity.Internal.InternalContext.Initialize()
   at System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   at System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   at System.Data.Entity.Internal.Linq.InternalSet`1.get_InternalContext()
   at System.Data.Entity.Infrastructure.DbQuery`1.System.Linq.IQueryable.get_Provider()
   at System.Linq.Queryable.Join[TOuter,TInner,TKey,TResult](IQueryable`1 outer, IEnumerable`1 inner, Expression`1 outerKeySelector, Expression`1 innerKeySelector, Expression`1 resultSelector)
   at Musicalog.Common.Infrastructure.RequestHandlers.Albums.AlbumListQueryHandler.GetAllAlbums(Int32 skip, Int32 take, String sortBy, String sortDirection, Int32& count) in C:\Surya\Musicalog\src\Musicalog.Common\Infrastructure\RequestHandlers\Albums\AlbumListQueryHandler.cs:line 48
   at Musicalog.Common.Infrastructure.RequestHandlers.Albums.AlbumListQueryHandler.<Handle>d__2.MoveNext() in C:\Surya\Musicalog\src\Musicalog.Common\Infrastructure\RequestHandlers\Albums\AlbumListQueryHandler.cs:line 28
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:-1,State:0,Class:20
2020-12-16 13:01:09.233 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:01:10.065 +00:00 [Information] Returning the requested page of albums from a total of 2 albums
2020-12-16 13:02:26.880 +00:00 [Information] Request for creating album CreateAlbumCommand { AlbumId: 0, AlbumName: "Titanium", ArtistName: "Boys", Stock: 2000, Type: 1 }
2020-12-16 13:02:27.041 +00:00 [Information] Album was created with id 3
2020-12-16 13:02:31.171 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:02:31.233 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:02:33.800 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "stock", SortDirection: "asc" }
2020-12-16 13:02:33.880 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:02:35.042 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "stock", SortDirection: "desc" }
2020-12-16 13:02:35.133 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:04:03.163 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:04:03.740 +00:00 [Error] Errored while getting list of albums "A file activation error occurred. The physical file name 'App_Data\Musicalog.mdf' may be incorrect. Diagnose and correct additional errors, and retry the operation.
CREATE DATABASE failed. Some file names listed could not be created. Check related errors."
System.Data.SqlClient.SqlException (0x80131904): A file activation error occurred. The physical file name 'App_Data\Musicalog.mdf' may be incorrect. Diagnose and correct additional errors, and retry the operation.
CREATE DATABASE failed. Some file names listed could not be created. Check related errors.
   at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at System.Data.SqlClient.SqlCommand.RunExecuteNonQueryTds(String methodName, Boolean async, Int32 timeout, Boolean asyncWrite)
   at System.Data.SqlClient.SqlCommand.InternalExecuteNonQuery(TaskCompletionSource`1 completion, String methodName, Boolean sendToPipe, Int32 timeout, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry)
   at System.Data.SqlClient.SqlCommand.ExecuteNonQuery()
   at System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.<NonQuery>b__0(DbCommand t, DbCommandInterceptionContext`1 c)
   at System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TTarget,TInterceptionContext,TResult](TTarget target, Func`3 operation, TInterceptionContext interceptionContext, Action`3 executing, Action`3 executed)
   at System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.NonQuery(DbCommand command, DbCommandInterceptionContext interceptionContext)
   at System.Data.Entity.SqlServer.SqlProviderServices.<>c__DisplayClass1a.<CreateDatabaseFromScript>b__19(DbConnection conn)
   at System.Data.Entity.SqlServer.SqlProviderServices.<>c__DisplayClass33.<UsingConnection>b__32()
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.<>c__DisplayClass1.<Execute>b__0()
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation)
   at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute(Action operation)
   at System.Data.Entity.SqlServer.SqlProviderServices.UsingConnection(DbConnection sqlConnection, Action`1 act)
   at System.Data.Entity.SqlServer.SqlProviderServices.UsingMasterConnection(DbConnection sqlConnection, Action`1 act)
   at System.Data.Entity.SqlServer.SqlProviderServices.CreateDatabaseFromScript(Nullable`1 commandTimeout, DbConnection sqlConnection, String createDatabaseScript)
   at System.Data.Entity.SqlServer.SqlProviderServices.DbCreateDatabase(DbConnection connection, Nullable`1 commandTimeout, StoreItemCollection storeItemCollection)
   at System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(DbConnection connection, Nullable`1 commandTimeout, StoreItemCollection storeItemCollection)
   at System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase()
   at System.Data.Entity.Migrations.Utilities.DatabaseCreator.Create(DbConnection connection)
   at System.Data.Entity.Migrations.DbMigrator.EnsureDatabaseExists(Action mustSucceedToKeepDatabase)
   at System.Data.Entity.Migrations.DbMigrator.Update(String targetMigration)
   at System.Data.Entity.Internal.DatabaseCreator.CreateDatabase(InternalContext internalContext, Func`3 createMigrator, ObjectContext objectContext)
   at System.Data.Entity.Internal.InternalContext.CreateDatabase(ObjectContext objectContext, DatabaseExistenceState existenceState)
   at System.Data.Entity.Database.Create(DatabaseExistenceState existenceState)
   at System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(TContext context)
   at System.Data.Entity.Internal.InternalContext.<>c__DisplayClassf`1.<CreateInitializationAction>b__e()
   at System.Data.Entity.Internal.InternalContext.PerformInitializationAction(Action action)
   at System.Data.Entity.Internal.InternalContext.PerformDatabaseInitialization()
   at System.Data.Entity.Internal.LazyInternalContext.<InitializeDatabase>b__4(InternalContext c)
   at System.Data.Entity.Internal.RetryAction`1.PerformAction(TInput input)
   at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabaseAction(Action`1 action)
   at System.Data.Entity.Internal.LazyInternalContext.InitializeDatabase()
   at System.Data.Entity.Internal.InternalContext.Initialize()
   at System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)
   at System.Data.Entity.Internal.Linq.InternalSet`1.Initialize()
   at System.Data.Entity.Internal.Linq.InternalSet`1.get_InternalContext()
   at System.Data.Entity.Infrastructure.DbQuery`1.System.Linq.IQueryable.get_Provider()
   at System.Linq.Queryable.Join[TOuter,TInner,TKey,TResult](IQueryable`1 outer, IEnumerable`1 inner, Expression`1 outerKeySelector, Expression`1 innerKeySelector, Expression`1 resultSelector)
   at Musicalog.Common.Infrastructure.RequestHandlers.Albums.AlbumListQueryHandler.GetAllAlbums(Int32 skip, Int32 take, String sortBy, String sortDirection, Int32& count) in C:\Surya\Musicalog\src\Musicalog.Common\Infrastructure\RequestHandlers\Albums\AlbumListQueryHandler.cs:line 48
   at Musicalog.Common.Infrastructure.RequestHandlers.Albums.AlbumListQueryHandler.<Handle>d__2.MoveNext() in C:\Surya\Musicalog\src\Musicalog.Common\Infrastructure\RequestHandlers\Albums\AlbumListQueryHandler.cs:line 28
ClientConnectionId:00270f71-7204-475b-a422-d17f9282b7f0
Error Number:5105,State:2,Class:16
2020-12-16 13:05:37.620 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:05:38.664 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:05:45.272 +00:00 [Information] Requesting album details for AlbumQuery { Id: 3 }
2020-12-16 13:05:45.360 +00:00 [Information] Returning requested album info as AlbumModel { Id: 3, Name: "Titanium", SKU: "5S0X-TO88", Artists: [ArtistModel { Id: 3, Name: "Boys" }], Type: Vinyl, Inventory: InventoryModel { Id: 3, SKU: "5S0X-TO88", StockPurchased: 0, SoldSoFar: 0, Stock: 2000 } }
2020-12-16 13:05:49.419 +00:00 [Information] Request to update album UpdateAlbumCommand { AlbumId: 3, AlbumName: "Titanium", Artist: ArtistModel { Id: 0, Name: "Boys" }, Stock: 1500, Type: 1 }
2020-12-16 13:05:49.640 +00:00 [Information] Album was updated succesfully
2020-12-16 13:05:50.695 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:05:50.760 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:05:52.090 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "stock", SortDirection: "asc" }
2020-12-16 13:05:52.145 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:06:17.306 +00:00 [Information] Request for creating album CreateAlbumCommand { AlbumId: 0, AlbumName: "Millenium", ArtistName: "Backstreet Boys", Stock: 5000, Type: 2 }
2020-12-16 13:06:17.417 +00:00 [Information] Album was created with id 4
2020-12-16 13:06:19.184 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:06:19.249 +00:00 [Information] Returning the requested page of albums from a total of 4 albums
2020-12-16 13:06:43.734 +00:00 [Information] Requesting album details for AlbumQuery { Id: 4 }
2020-12-16 13:06:43.770 +00:00 [Information] Returning requested album info as AlbumModel { Id: 4, Name: "Millenium", SKU: "FW7V-1YDD", Artists: [ArtistModel { Id: 4, Name: "Backstreet Boys" }], Type: CD, Inventory: InventoryModel { Id: 4, SKU: "FW7V-1YDD", StockPurchased: 0, SoldSoFar: 0, Stock: 5000 } }
2020-12-16 13:06:47.497 +00:00 [Information] Request to update album UpdateAlbumCommand { AlbumId: 4, AlbumName: "Millennium", Artist: ArtistModel { Id: 0, Name: "Backstreet Boys" }, Stock: 5000, Type: 2 }
2020-12-16 13:06:47.618 +00:00 [Information] Album was updated succesfully
2020-12-16 13:06:48.725 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:06:48.787 +00:00 [Information] Returning the requested page of albums from a total of 4 albums
2020-12-16 13:06:58.151 +00:00 [Information] Request to delete album DeleteAlbumCommand { AlbumId: 3 }
2020-12-16 13:06:58.326 +00:00 [Information] Album successfully deleted
2020-12-16 13:06:58.342 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:06:58.397 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:07:02.301 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "stock", SortDirection: "asc" }
2020-12-16 13:07:02.358 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:07:03.124 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "artist", SortDirection: "asc" }
2020-12-16 13:07:03.178 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:07:03.594 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "type", SortDirection: "asc" }
2020-12-16 13:07:03.647 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:07:04.222 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:07:04.276 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:09:33.723 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:09:34.791 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:09:39.682 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:09:39.747 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:09:42.670 +00:00 [Information] Requesting album details for AlbumQuery { Id: 4 }
2020-12-16 13:09:42.753 +00:00 [Information] Returning requested album info as AlbumModel { Id: 4, Name: "Millennium", SKU: "FW7V-1YDD", Artists: [ArtistModel { Id: 4, Name: "Backstreet Boys" }], Type: CD, Inventory: InventoryModel { Id: 4, SKU: "FW7V-1YDD", StockPurchased: 0, SoldSoFar: 0, Stock: 5000 } }
2020-12-16 13:09:51.160 +00:00 [Information] Request to update album UpdateAlbumCommand { AlbumId: 4, AlbumName: "Millennium", Artist: ArtistModel { Id: 0, Name: "Backstreet Boys" }, Stock: 18500, Type: 2 }
2020-12-16 13:09:51.398 +00:00 [Information] Album was updated succesfully
2020-12-16 13:09:52.874 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "name", SortDirection: "asc" }
2020-12-16 13:09:52.946 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:09:53.809 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "stock", SortDirection: "asc" }
2020-12-16 13:09:53.866 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
2020-12-16 13:09:54.450 +00:00 [Information] Requesting album list AlbumListQuery { Skip: 0, Take: 5, SortBy: "stock", SortDirection: "desc" }
2020-12-16 13:09:54.506 +00:00 [Information] Returning the requested page of albums from a total of 3 albums
